Executive Summary

Scope & Purpose:
Project # 3 was great way to learn the remote call procedures. RPC is different to TCP or UDP. TCP and UDP are protocols to connect to remote clients and send data to it. But RPC is calling functions which are in remote servers. In this project, we also implemented it as a multi-thread server. It can handle multiple requests from different clients in the same time. It indeed helped us to learn both the RPC and multi-thread controning techniques.

Technical Impression:
This project encompassing the basic implementation of RPC. We choose Python as our programming language and the RPC library is xmlrpclib which is simple for us to develope this project. And Python is a script language which is different and simple compared to Java.
The RPC actually implemented by TCP as the lower communication layer. In the server part we had to implement three different functions each of them are set, get and del. And in the client part we can only call the exactly same name of functions which are implemented in the sever. This is the different part between the first project and this one. And in this library the server will register the implemented functions, so the clients will get the registered functions when it connects to the server. Actually the client is just like sending arguments with a special key which represents the function in the server. And when server receives the packet and pass those arguments to a function which related to the key.
We also implemented the server which can handle multiple requests in the same time. It is hard to test the multi-client problem when they request in the same time in the begining. We finally found a way that we putted raw_input() in the server to force it stopping in some point. Then when other requests arrives, the data table will have a wrong data. That is how we found and tested the multi-client problem. We solved this problem by mutex which will lock the data access parts when a request arrives and unlock it after the request completed. Thus, other requests will wait until the previous request done. So clients will not access the data in the same time.
This project was a good way to help us learn the differences of RPC. It also help us to understand the problem in the multi-client systems which are common in the real world. We are excited about the next project and what we will learn in the future projects.
